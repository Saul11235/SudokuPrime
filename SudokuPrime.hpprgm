#pragma mode( separator(.,;) integer(h32) )

// SudokuPrime por Edwin Saul/Saul11235
// sudoku game for hp prime calculators
// sudoku para calculadoras hp prime

//---------------------------------------------------
TipoJuego:=1; //2x2 tipo1   -  2x3 tipo2  -  3x3 tipo3
//---------------------------------------------------
//TIPO1 2x2
LOCAL DatosGrupos22:={{1,2,5,6},{3,4,7,8},{9,10,13,14},{11,12,15,16},{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16},{1,5,9,13},{2,6,10,14},{3,7,11,15},{4,8,12,16}};
LOCAL DatosCasillas22:={{1,5,9},{1,5,10},{2,5,11},{2,5,12},{1,6,9},{1,6,10},{2,6,11},{2,6,12},{3,7,9},{3,7,10},{4,7,11},{4,7,12},{3,8,9},{3,8,10},{4,8,11},{4,8,12}};
LOCAL NroCasillas22:=16;
LOCAL NroFichas22:=4;
LOCAL Fuente22:=7;
LOCAL Padding22:=54;
LOCAL LimiteIteracionGen22:=3;
LOCAL NroCasillasFijas22:=7;
//TIPO2 2x3
LOCAL DatosGrupos23:={{1,2,3,7,8,9},{4,5,6,10,11,12},{13,14,15,19,20,21},{16,17,18,22,23,24},{25,26,27,31,32,33},{28,29,30,34,35,36},{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18},{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36},{1,7,13,19,25,31},{2,8,14,20,26,32},{3,9,15,21,27,33},{4,10,16,22,28,34},{5,11,17,23,29,35},{6,12,18,24,30,36}};
LOCAL DatosCasillas23:={{1,7,13},{1,7,14},{1,7,15},{2,7,16},{2,7,17},{2,7,18},{1,8,13},{1,8,14},{1,8,15},{2,8,16},{2,8,17},{2,8,18},{3,9,13},{3,9,14},{3,9,15},{4,9,16},{4,9,17},{4,9,18},{3,10,13},{3,10,14},{3,10,15},{4,10,16},{4,10,17},{4,10,18},{5,11,13},{5,11,14},{5,11,15},{6,11,16},{6,11,17},{6,11,18},{5,12,13},{5,12,14},{5,12,15},{6,12,16},{6,12,17},{6,12,18}};
LOCAL NroCasillas23:=36;
LOCAL NroFichas23:=6;
LOCAL Fuente23:=6;
LOCAL Padding23:=36;
LOCAL LimiteIteracionGen23:=5;
LOCAL NroCasillasFijas23:=15;
//TIPO2 3x3
LOCAL DatosGrupos33:={{1,2,3,10,11,12,19,20,21},{4,5,6,13,14,15,22,23,24},{7,8,9,16,17,18,25,26,27},{28,29,30,37,38,39,46,47,48},{31,32,33,40,41,42,49,50,51},{34,35,36,43,44,45,52,53,54},{55,56,57,64,65,66,73,74,75},{58,59,60,67,68,69,76,77,78},{61,62,63,70,71,72,79,80,81},{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54},{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81},{1,10,19,28,37,46,55,64,73},{2,11,20,29,38,47,56,65,74},{3,12,21,30,39,48,57,66,75},{4,13,22,31,40,49,58,67,76},{5,14,23,32,41,50,59,68,77},{6,15,24,33,42,51,60,69,78},{7,16,25,34,43,52,61,70,79},{8,17,26,35,44,53,62,71,80},{9,18,27,36,45,54,63,72,81}};                          
LOCAL DatosCasillas33:={{1,10,19},{1,10,20},{1,10,21},{2,10,22},{2,10,23},{2,10,24},{3,10,25},{3,10,26},{3,10,27},{1,11,19},{1,11,20},{1,11,21},{2,11,22},{2,11,23},{2,11,24},{3,11,25},{3,11,26},{3,11,27},{1,12,19},{1,12,20},{1,12,21},{2,12,22},{2,12,23},{2,12,24},{3,12,25},{3,12,26},{3,12,27},{4,13,19},{4,13,20},{4,13,21},{5,13,22},{5,13,23},{5,13,24},{6,13,25},{6,13,26},{6,13,27},{4,14,19},{4,14,20},{4,14,21},{5,14,22},{5,14,23},{5,14,24},{6,14,25},{6,14,26},{6,14,27},{4,15,19},{4,15,20},{4,15,21},{5,15,22},{5,15,23},{5,15,24},{6,15,25},{6,15,26},{6,15,27},{7,16,19},{7,16,20},{7,16,21},{8,16,22},{8,16,23},{8,16,24},{9,16,25},{9,16,26},{9,16,27},{7,17,19},{7,17,20},{7,17,21},{8,17,22},{8,17,23},{8,17,24},{9,17,25},{9,17,26},{9,17,27},{7,18,19},{7,18,20},{7,18,21},{8,18,22},{8,18,23},{8,18,24},{9,18,25},{9,18,26},{9,18,27}};       
LOCAL NroCasillas33:=81;
LOCAL NroFichas33:=9;
LOCAL Fuente33:=5;
LOCAL Padding33:=24;
LOCAL LimiteIteracionGen33:=10;
LOCAL NroCasillasFijas33:=25;
//---------------------------------------------------
//Biblioteca de sudokus ya generados, la mayor parte del tiempo el generador 
//de la calculadora demora demasiado en especial con 3x3 (estos fueron generados con el mismo algoritmo previamente)
// primer grupo 2x2, segundo grupo 2x3 tercer grupo 3x3
LOCAL Biblioteca:={{  
       {4,2,1,3,1,3,4,2,3,4,2,1,2,1,3,4},
       {1,4,2,3,3,2,1,4,2,3,4,1,4,1,3,2},
       {1,2,4,3,4,3,2,1,2,1,3,4,3,4,1,2}
 },{ 
       {4,1,5,3,2,6,2,3,6,5,4,1,5,4,3,6,1,2,6,2,1,4,5,3,3,5,2,1,6,4,1,6,4,2,3,5},
       {6,2,1,3,5,4,4,5,3,2,1,6,2,3,4,5,6,1,1,6,5,4,2,3,3,1,2,6,4,5,5,4,6,1,3,2},
       {4,5,3,2,6,1,6,1,2,3,5,4,3,2,5,4,1,6,1,4,6,5,2,3,5,3,1,6,4,2,2,6,4,1,3,5}
 },{ 
       {9,6,5,4,7,1,3,8,2,7,4,3,2,9,8,1,6,5,1,8,2,3,5,6,4,7,9,8,7,9,1,6,3,5,2,4,2,3,4,5,8,9,6,1,7,5,1,6,7,2,4,9,3,8,4,9,8,6,1,2,7,5,3,3,5,1,8,4,7,2,9,6,6,2,7,9,3,5,8,4,1},
       {4,2,6,8,5,1,3,7,9,9,1,3,2,4,7,8,6,5,8,7,5,3,6,9,1,4,2,2,3,7,1,9,4,5,8,6,6,8,4,7,3,5,2,9,1,1,5,9,6,2,8,4,3,7,5,4,2,9,7,3,6,1,8,7,6,8,4,1,2,9,5,3,3,9,1,5,8,6,7,2,4},
       {2,8,4,1,9,3,6,7,5,5,7,9,2,6,8,4,1,3,3,6,1,4,5,7,8,9,2,4,2,6,3,7,9,5,8,1,9,1,5,8,2,4,7,3,6,7,3,8,6,1,5,2,4,9,8,9,3,5,4,2,1,6,7,1,5,7,9,8,6,3,2,4,6,4,2,7,3,1,9,5,8},
       {8,4,1,5,2,3,7,9,6,3,5,7,8,6,9,1,2,4,9,6,2,1,7,4,8,5,3,5,7,9,2,4,8,6,3,1,6,3,8,7,5,1,9,4,2,1,2,4,3,9,6,5,7,8,7,1,6,4,3,5,2,8,9,2,8,3,9,1,7,4,6,5,4,9,5,6,8,2,3,1,7},
       {1,2,8,7,6,4,9,5,3,5,9,6,2,8,3,4,1,7,7,3,4,9,1,5,2,8,6,6,4,9,5,3,2,1,7,8,2,5,7,8,4,1,3,6,9,8,1,3,6,7,9,5,4,2,4,7,5,3,9,8,6,2,1,3,8,2,1,5,6,7,9,4,9,6,1,4,2,7,8,3,5},
       {7,9,2,6,1,3,5,8,4,8,5,6,9,2,4,7,3,1,1,3,4,7,5,8,2,9,6,6,1,8,3,7,2,4,5,9,9,7,5,4,8,6,3,1,2,4,2,3,5,9,1,6,7,8,2,6,9,8,3,5,1,4,7,5,4,7,1,6,9,8,2,3,3,8,1,2,4,7,9,6,5},
       {4,2,7,8,3,9,6,5,1,3,5,8,2,6,1,9,4,7,1,9,6,5,4,7,2,8,3,5,7,3,9,2,6,8,1,4,2,8,9,1,7,4,5,3,6,6,4,1,3,8,5,7,2,9,8,3,4,7,9,2,1,6,5,9,6,5,4,1,8,3,7,2,7,1,2,6,5,3,4,9,8},
       {3,6,1,9,8,4,5,7,2,4,7,5,2,6,1,8,3,9,9,8,2,7,3,5,6,4,1,1,4,9,5,7,8,3,2,6,6,2,8,3,1,9,7,5,4,7,5,3,6,4,2,1,9,8,8,3,6,4,9,7,2,1,5,5,1,4,8,2,3,9,6,7,2,9,7,1,5,6,4,8,3},
       {6,1,7,3,9,5,4,2,8,9,8,4,2,1,6,5,7,3,5,2,3,8,7,4,1,9,6,8,4,9,7,5,3,6,1,2,2,7,1,6,4,9,3,8,5,3,5,6,1,8,2,9,4,7,4,6,2,9,3,7,8,5,1,7,9,8,5,6,1,2,3,4,1,3,5,4,2,8,7,6,9},
       {3,8,1,9,2,7,4,5,6,7,4,9,6,5,8,1,3,2,2,5,6,1,3,4,9,7,8,6,1,7,2,4,5,8,9,3,5,9,8,3,6,1,7,2,4,4,3,2,8,7,9,6,1,5,9,2,3,4,1,6,5,8,7,8,7,4,5,9,2,3,6,1,1,6,5,7,8,3,2,4,9},
       {9,3,7,1,5,4,6,8,2,5,4,8,2,7,6,1,3,9,2,1,6,8,3,9,5,7,4,8,2,3,5,4,1,7,9,6,7,5,1,6,9,8,4,2,3,6,9,4,3,2,7,8,5,1,1,8,5,9,6,2,3,4,7,4,6,9,7,8,3,2,1,5,3,7,2,4,1,5,9,6,8},
       {7,9,3,1,5,6,8,2,4,8,4,6,3,2,7,9,5,1,5,1,2,8,4,9,6,7,3,3,5,1,9,7,8,2,4,6,6,7,8,4,3,2,5,1,9,9,2,4,5,6,1,7,3,8,1,8,5,7,9,4,3,6,2,4,6,7,2,8,3,1,9,5,2,3,9,6,1,5,4,8,7},
       {2,4,6,7,5,8,1,3,9,7,1,9,2,3,6,8,5,4,3,8,5,9,1,4,6,7,2,1,3,2,8,9,7,5,4,6,5,9,8,4,6,3,7,2,1,4,6,7,5,2,1,9,8,3,6,2,4,1,8,5,3,9,7,9,5,3,6,7,2,4,1,8,8,7,1,3,4,9,2,6,5},
       {1,7,4,3,6,5,8,9,2,8,6,2,4,7,9,5,1,3,3,5,9,2,8,1,4,6,7,2,8,7,1,5,3,9,4,6,9,1,3,7,4,6,2,5,8,5,4,6,8,9,2,7,3,1,7,2,5,6,3,4,1,8,9,4,3,1,9,2,8,6,7,5,6,9,8,5,1,7,3,2,4},
       {2,9,7,4,1,6,5,3,8,6,5,8,9,7,3,2,4,1,3,1,4,8,5,2,9,6,7,1,7,9,5,2,4,3,8,6,8,3,2,7,6,1,4,9,5,5,4,6,3,8,9,1,7,2,7,8,3,2,9,5,6,1,4,9,2,1,6,4,7,8,5,3,4,6,5,1,3,8,7,2,9},
       {5,8,1,2,6,7,3,4,9,2,7,9,5,3,4,1,8,6,4,6,3,8,9,1,2,7,5,9,4,7,6,1,8,5,3,2,1,2,8,7,5,3,9,6,4,3,5,6,9,4,2,7,1,8,8,9,5,3,7,6,4,2,1,7,1,2,4,8,9,6,5,3,6,3,4,1,2,5,8,9,7},
       {5,4,2,8,1,6,3,7,9,7,6,1,2,9,3,8,5,4,3,8,9,4,5,7,1,6,2,6,2,5,3,4,8,7,9,1,9,3,8,6,7,1,4,2,5,1,7,4,5,2,9,6,3,8,8,1,3,9,6,5,2,4,7,2,9,7,1,3,4,5,8,6,4,5,6,7,8,2,9,1,3},
       {8,2,9,6,4,1,3,5,7,1,3,4,5,7,9,2,6,8,7,5,6,8,2,3,1,9,4,5,7,2,3,9,6,4,8,1,3,9,8,2,1,4,5,7,6,4,6,1,7,5,8,9,2,3,9,1,7,4,6,2,8,3,5,2,8,5,1,3,7,6,4,9,6,4,3,9,8,5,7,1,2},
       {8,5,4,7,9,6,1,3,2,2,7,3,5,1,8,9,6,4,6,1,9,2,3,4,7,8,5,7,4,1,9,6,3,5,2,8,3,9,2,1,8,5,4,7,6,5,6,8,4,7,2,3,9,1,4,8,6,3,5,9,2,1,7,9,2,7,8,4,1,6,5,3,1,3,5,6,2,7,8,4,9},
       {8,4,3,6,5,7,9,2,1,1,6,7,3,2,9,8,4,5,2,9,5,8,4,1,6,7,3,9,5,8,4,7,6,3,1,2,3,7,4,1,9,2,5,8,6,6,1,2,5,3,8,4,9,7,5,8,9,7,1,3,2,6,4,7,3,6,2,8,4,1,5,9,4,2,1,9,6,5,7,3,8},
       {8,3,5,6,9,7,2,1,4,4,9,1,3,8,2,6,5,7,2,6,7,5,4,1,8,3,9,6,5,3,8,7,4,9,2,1,7,1,4,9,2,3,5,8,6,9,8,2,1,5,6,4,7,3,3,4,6,2,1,5,7,9,8,5,7,9,4,3,8,1,6,2,1,2,8,7,6,9,3,4,5},
       {7,6,9,3,1,2,8,4,5,2,8,3,4,5,6,7,9,1,5,1,4,8,9,7,3,6,2,4,3,8,9,6,5,1,2,7,6,7,5,1,2,4,9,8,3,9,2,1,7,3,8,4,5,6,3,9,2,5,8,1,6,7,4,8,5,7,6,4,3,2,1,9,1,4,6,2,7,9,5,3,8},
       {3,6,8,4,2,7,9,5,1,4,2,7,9,5,1,3,6,8,9,1,5,3,6,8,4,2,7,6,3,4,8,1,5,7,9,2,7,8,1,2,9,6,5,3,4,5,9,2,7,4,3,8,1,6,2,7,3,1,8,9,6,4,5,8,4,6,5,3,2,1,7,9,1,5,9,6,7,4,2,8,3},
       {7,8,6,9,3,2,4,1,5,4,3,9,1,6,5,7,8,2,5,2,1,7,8,4,9,3,6,6,4,7,5,2,3,1,9,8,9,5,8,6,4,1,2,7,3,2,1,3,8,9,7,6,5,4,1,7,4,3,5,6,8,2,9,3,9,2,4,1,8,5,6,7,8,6,5,2,7,9,3,4,1},
       {2,8,6,7,5,1,4,3,9,9,1,4,2,3,6,5,8,7,3,7,5,4,8,9,1,2,6,5,4,8,6,7,2,3,9,1,1,6,3,8,9,4,7,5,2,7,2,9,3,1,5,8,6,4,4,9,1,5,2,3,6,7,8,8,3,2,1,6,7,9,4,5,6,5,7,9,4,8,2,1,3},
       {4,3,7,1,5,9,8,6,2,2,8,6,3,7,4,1,5,9,1,5,9,8,2,6,3,7,4,3,6,1,9,4,7,5,2,8,7,4,8,2,1,5,9,3,6,9,2,5,6,3,8,7,4,1,5,7,2,4,9,1,6,8,3,6,1,4,5,8,3,2,9,7,8,9,3,7,6,2,4,1,5},
       {3,4,8,7,2,1,9,5,6,9,1,7,5,3,6,4,8,2,5,2,6,8,9,4,7,1,3,1,9,3,6,5,2,8,4,7,6,5,4,3,7,8,2,9,1,8,7,2,1,4,9,6,3,5,4,6,9,2,1,5,3,7,8,7,8,5,4,6,3,1,2,9,2,3,1,9,8,7,5,6,4},
       {3,2,6,7,1,4,5,8,9,8,5,4,2,6,9,1,3,7,7,1,9,5,3,8,2,6,4,6,9,5,3,4,2,7,1,8,1,4,8,9,7,6,3,2,5,2,3,7,1,8,5,4,9,6,9,7,2,6,5,1,8,4,3,4,6,3,8,2,7,9,5,1,5,8,1,4,9,3,6,7,2},
       {8,6,7,2,3,5,9,1,4,9,3,4,1,6,7,2,8,5,1,2,5,8,9,4,3,6,7,2,5,9,7,4,6,8,3,1,3,1,8,9,5,2,7,4,6,7,4,6,3,8,1,5,2,9,5,7,3,4,1,8,6,9,2,4,9,2,6,7,3,1,5,8,6,8,1,5,2,9,4,7,3},
       {2,6,9,4,1,7,5,3,8,7,1,8,3,5,6,2,4,9,3,4,5,2,8,9,7,1,6,6,3,4,5,9,8,1,7,2,9,5,1,7,2,3,6,8,4,8,2,7,6,4,1,3,9,5,1,8,2,9,7,5,4,6,3,4,7,3,8,6,2,9,5,1,5,9,6,1,3,4,8,2,7},
       {8,4,9,2,7,6,3,1,5,2,5,3,8,1,4,7,9,6,1,6,7,3,9,5,2,8,4,3,2,1,7,4,9,5,6,8,7,8,4,6,5,2,1,3,9,5,9,6,1,3,8,4,7,2,9,1,2,5,6,7,8,4,3,6,3,8,4,2,1,9,5,7,4,7,5,9,8,3,6,2,1},
       {2,6,9,5,4,1,3,7,8,8,3,4,7,6,2,5,1,9,7,5,1,9,3,8,2,6,4,4,1,8,2,9,6,7,5,3,9,7,6,3,1,5,4,8,2,3,2,5,4,8,7,6,9,1,1,8,2,6,5,4,9,3,7,5,9,7,8,2,3,1,4,6,6,4,3,1,7,9,8,2,5},
       {3,6,9,8,2,4,7,5,1,1,8,4,5,7,3,9,6,2,7,5,2,6,1,9,4,8,3,6,9,8,3,4,1,2,7,5,2,1,7,9,8,5,3,4,6,4,3,5,2,6,7,1,9,8,5,2,1,7,9,8,6,3,4,9,4,3,1,5,6,8,2,7,8,7,6,4,3,2,5,1,9},
       {8,6,9,3,2,1,4,5,7,3,5,1,6,4,7,2,9,8,2,4,7,5,8,9,3,6,1,9,1,2,7,6,3,8,4,5,6,3,5,4,9,8,1,7,2,4,7,8,2,1,5,9,3,6,5,9,4,8,7,2,6,1,3,1,8,3,9,5,6,7,2,4,7,2,6,1,3,4,5,8,9},
       {2,1,9,6,8,5,7,4,3,6,5,3,7,4,1,9,2,8,8,4,7,2,9,3,6,5,1,9,2,4,8,3,7,1,6,5,3,7,1,9,5,6,2,8,4,5,8,6,1,2,4,3,7,9,1,6,8,4,7,9,5,3,2,4,9,5,3,6,2,8,1,7,7,3,2,5,1,8,4,9,6},
       {3,4,1,7,2,6,5,9,8,2,7,6,9,8,5,4,3,1,8,5,9,1,3,4,2,7,6,9,2,7,5,6,8,3,1,4,6,3,5,4,1,9,8,2,7,1,8,4,2,7,3,9,6,5,5,6,3,8,9,1,7,4,2,7,1,8,3,4,2,6,5,9,4,9,2,6,5,7,1,8,3},
       {3,1,7,6,5,9,2,8,4,4,5,8,2,7,1,6,3,9,6,2,9,4,8,3,7,5,1,9,7,1,8,2,5,3,4,6,5,6,2,7,3,4,1,9,8,8,3,4,9,1,6,5,2,7,1,9,5,3,6,8,4,7,2,2,8,3,1,4,7,9,6,5,7,4,6,5,9,2,8,1,3},
       {2,8,3,1,4,9,7,5,6,7,5,9,6,8,2,3,1,4,1,6,4,7,3,5,8,2,9,9,7,6,8,5,4,1,3,2,4,2,5,9,1,3,6,7,8,3,1,8,2,6,7,4,9,5,6,4,2,5,7,1,9,8,3,8,9,1,3,2,6,5,4,7,5,3,7,4,9,8,2,6,1},
       {4,7,3,5,6,9,2,1,8,6,9,2,4,8,1,7,3,5,5,8,1,2,7,3,9,6,4,1,6,5,9,4,2,8,7,3,7,3,4,8,1,5,6,9,2,9,2,8,7,3,6,5,4,1,8,5,7,1,9,4,3,2,6,3,4,9,6,2,8,1,5,7,2,1,6,3,5,7,4,8,9},
       {3,1,9,2,5,4,7,6,8,6,8,2,9,1,7,5,4,3,5,4,7,3,8,6,1,9,2,4,5,3,7,6,9,8,2,1,7,2,6,8,4,1,3,5,9,8,9,1,5,3,2,6,7,4,9,7,5,1,2,3,4,8,6,1,6,8,4,9,5,2,3,7,2,3,4,6,7,8,9,1,5},
       {4,7,6,8,2,3,1,5,9,5,2,9,1,4,6,3,7,8,1,3,8,7,9,5,4,2,6,6,1,7,4,5,2,8,9,3,8,5,4,9,3,1,2,6,7,3,9,2,6,8,7,5,1,4,7,4,1,2,6,8,9,3,5,2,8,3,5,7,9,6,4,1,9,6,5,3,1,4,7,8,2}
 }};
//---------------------------------------------------
//Variables de Colores
LOCAL FONDO:=RGB(235,235,255);
LOCAL FONDO2:=RGB(225,225,245);
LOCAL BLANCO:=RGB(255,255,255);
LOCAL GRIS:=RGB(50,50,50);
LOCAL GRIS2:=RGB(200,200,200);
LOCAL NEGRO:=RGB(0,0,0);
LOCAL ROJO:=RGB(200,0,0);
LOCAL AZUL1:=RGB(0,0,100);
LOCAL COLORBOTON:=RGB(60,60,60);
LOCAL COLORBOTONT:=RGB(240,240,240);
//.. Colores para casillas Jugadas
LOCAL CASILLAFIJA:=       RGB(0,0,0);
LOCAL CASILAJUGADAOK:=    RGB(0,0,150);
LOCAL CASILLAJUGADAERROR:=RGB(150,0,0);
LOCAL CASILLAPISTA:=      RGB(75,0,75);
//---------------------------------------------------
//Variables  para control táctil
LOCAL nuevapantalla:=0;
LOCAL ContadorPantalla:=0;	
LOCAL PunteroTactil:={0,0};
LOCAL ReconocerTeclado:={};
LOCAL LimitreConPantalla:=5000;
LOCAL SePresionoUnatecla:=0;
LOCAL VariableTecla:=0;
LOCAL SeEstaApretandoBoton:=0;
LOCAL EstaUsandoTeclado:=0;
LOCAL PosX:=0;
LOCAL PosY:=0;
//---------------------------------------------------
//variables para configurar tipo de sudoku
LOCAL DatosGrupos,DatosCasillas,NroCasillas,NroFichas,Fuente,Padding;
//variables para ciclos y blibliotecas
LOCAL LimiteIteracionGen,NroCasillasFijas;
//---------------------------------------------------
//variables generadas
LOCAL NroGrupos,Casillas,CasillaConocida,PosibilidadGrupo,PosibilidadCasillas,NroPosibilidadGrupo,ContadorCasillas;
LOCAL ContadorGenerador:=0;
LOCAL VictoriaJuego:=0;
//--------------------------------------------------
//variables para jugar NOTA TAMBIEN USAREMOS  Casillas COMO SOLUCION
LOCAL CasillasParaJugarOriginales:={}; //ORIGINALES NO SE MODIFICAN
LOCAL CasillasParaJugar:={}; //Casillas para Jugar, Incluye la casilla por defecto
LOCAL CasillaConocidaParaJugar:={}; //Marca 1 sólo si se conoce el contenido de la casilla
LOCAL EstadoCasillaParaJugar:={};  // Indica el estado 
    // 0 -- NO SE CONOCE
    // 1 -- CASILLA FIJA NO SE PUEDE MODIFICAR
    // 2 -- CASILLA JUGADA SIN QUEJA AZUL
    // 3 -- CASILLA JUGADA CON QUEJA ROJO
    // 4 -- CASILLA DADA COMO PISTA MORADO 
//---------------------------------------------------
//Funciones GenerarSudoku
  ConfigurarTipoSudoku();
  AlistarVariablesGenerador();
  BorrarPosibilidadGrupo(CodGrupo,FichaParaBorrar);
  BorrarPosibilidadCasilla(CodCasilla,FichaParaBorrar);
  PosibleFichaParaCasilla(CodCasilla);
  SePuedeColocarFicha(CodCasilla);
  RellenarCasillero(CodCasilla); 
  CasillaConPocasDudas(); 
  RellenarTablero();
  ObtenerDeLaBiblioteca();
  IntercambiarFichas();
  OcultarCasillasTablero();
  GenerarSudoku();  //Se guarda el sudoku en --> Casillas 
//Funciones Para dibujar
  DibujarCuadro(Xinicial,Yinicial,AnchoX,AnchoY); //Dibujar para vista previa
  Grafico();
  PantallaOscuridad();
//Funciones tactiles
  SensorTactil();  
  ValidarCoordTactil(XX1,YY1,XX2,YY2);
  Titilar(XX1,YY1,XX2,YY2); 
  botonera();
//Funciones jugadas
  CambiarTipoSudoku(); 
  NuevoSudoku();
  ReiniciarSudoku(); 
  PistaSudoku();    
  TocarCasilleroSudoku(Casillero);   
// Funciones salir
  SALIRJUEGO();
//---------------------------------------------------
VIEW "Sudoku",START()
BEGIN 
  TipoJuego:=RANDINT(1,3); //Tipo Aleatorio de Sudoku
  ConfigurarTipoSudoku();
  GenerarSudoku();
  Grafico(); 
END;
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//
//  Funciones GenerarSudoku
//
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
EXPORT ConfigurarTipoSudoku() 
BEGIN
  CASE
   IF TipoJuego=1 THEN   //CASO SUDOKU 2x2-------
    DatosGrupos:=DatosGrupos22;
    DatosCasillas:=DatosCasillas22;
    NroCasillas:=NroCasillas22;
    NroFichas:=NroFichas22;
    Fuente:=Fuente22;
    Padding:=Padding22;
    LimiteIteracionGen:=LimiteIteracionGen22;
    NroCasillasFijas:=NroCasillasFijas22;
   END;
   IF TipoJuego=2 THEN   //CASO SUDOKU 2x3-------
    DatosGrupos:=DatosGrupos23;
    DatosCasillas:=DatosCasillas23;
    NroCasillas:=NroCasillas23;
    NroFichas:=NroFichas23;
    Fuente:=Fuente23;
    Padding:=Padding23;
    LimiteIteracionGen:=LimiteIteracionGen23;
    NroCasillasFijas:=NroCasillasFijas23;
   END;
   IF TipoJuego=3 THEN   //CASO SUDOKU 3x3-------
    DatosGrupos:=DatosGrupos33;
    DatosCasillas:=DatosCasillas33;
    NroCasillas:=NroCasillas33;
    NroFichas:=NroFichas33;
    Fuente:=Fuente33;
    Padding:=Padding33;
    LimiteIteracionGen:=LimiteIteracionGen33;
    NroCasillasFijas:=NroCasillasFijas33;
   END;
  END;
  AlistarVariablesGenerador();
END;
//---------------------------------------------------
EXPORT AlistarVariablesGenerador()
BEGIN
  Casillas:=MAKELIST(0,X,1,NroCasillas,1);
  CasillaConocida:=MAKELIST(0,X,1,NroCasillas,1);
  LOCAL ListaFichas:=MAKELIST(X,X,1,NroFichas,1);
  NroGrupos:=SIZE(DatosGrupos);
  PosibilidadGrupo:=MAKELIST(ListaFichas,X,1,NroGrupos,1);
  PosibilidadCasillas:=MAKELIST(ListaFichas,X,1,NroCasillas,1);
  NroPosibilidadGrupo:=MAKELIST(NroFichas,X,1,NroGrupos,1);
  ContadorCasillas:=NroCasillas;
END;
//---------------------------------------------------
EXPORT BorrarPosibilidadGrupo(CodGrupo,FichaParaBorrar)
BEGIN
  LOCAL PosEsteGrupo:=PosibilidadGrupo[CodGrupo];
  LOCAL PosicionLista:=POS(PosEsteGrupo,FichaParaBorrar);
  IF PosicionLista THEN
     LOCAL ListaReducida:=SUPPRESS(PosEsteGrupo,PosicionLista);
     PosibilidadGrupo[CodGrupo]:=ListaReducida;
     NroPosibilidadGrupo[CodGrupo]:=NroPosibilidadGrupo[CodGrupo]-1;
  END;
END;
//---------------------------------------------------
EXPORT BorrarPosibilidadCasilla(CodCasilla,FichaParaBorrar)
BEGIN
  LOCAL PosEstaFicha:=PosibilidadCasillas[CodCasilla];
  LOCAL PosicionLista:=POS(PosEstaFicha,FichaParaBorrar);
  IF PosicionLista THEN
     LOCAL ListaReducida:=SUPPRESS(PosEstaFicha,PosicionLista);
     PosibilidadCasillas[CodCasilla]:=ListaReducida;
  END;
END;
//---------------------------------------------------
EXPORT PosibleFichaParaCasilla(CodCasilla)
BEGIN
  //No try-catch
  LOCAL PosibilidadesEstaCasilla:=PosibilidadCasillas[CodCasilla];
  LOCAL Dimension:=SIZE(PosibilidadesEstaCasilla);
  LOCAL PosicionAleatoria:=RANDINT(1,Dimension);
  RETURN(PosibilidadesEstaCasilla[PosicionAleatoria  ]);
END;
//---------------------------------------------------
EXPORT SePuedeColocarFicha(CodCasilla)
BEGIN
  LOCAL HayPosiblesFichas:=SIZE(PosibilidadCasillas[CodCasilla]);
  LOCAL SeConoceElDato:=CasillaConocida[CodCasilla];
   IF HayPosiblesFichas AND NOT(SeConoceElDato) THEN
    RETURN(1); //si se puede colocar la ficha
   ELSE
    RETURN(0); //No se puede colocar la ficha
   END;
END;
//---------------------------------------------------
EXPORT RellenarCasillero(CodCasilla)
BEGIN
   IF  SePuedeColocarFicha(CodCasilla) THEN
     LOCAL FichaAleatoria:=PosibleFichaParaCasilla(CodCasilla);
     Casillas[CodCasilla]:=FichaAleatoria;
     CasillaConocida[CodCasilla]:=1;
     ContadorCasillas:=ContadorCasillas-1;
     //Borrando Posibilidades en grupos y casillas
     LOCAL GruposImplicados:=DatosCasillas[CodCasilla];
     LOCAL Contador:=0;
     LOCAL Limite:=SIZE(GruposImplicados);
       WHILE Contador<Limite DO
         Contador:=Contador+1;
         LOCAL GrupoImplicado:=GruposImplicados[Contador];
         BorrarPosibilidadGrupo(GrupoImplicado,FichaAleatoria);
         LOCAL CasillasImplicadas:=DatosGrupos[GrupoImplicado];
         LOCAL Contador2:=0;
         LOCAL Limite2:=SIZE(CasillasImplicadas);
           WHILE Contador2<Limite2 DO
             Contador2:=Contador2+1;
             LOCAL CasillaImplicada:=CasillasImplicadas[Contador2];
             BorrarPosibilidadCasilla(CasillaImplicada,FichaAleatoria);
           END;
       END; 
     RETURN(1);//Se relleno el casillero, todo ok
   ELSE
     RETURN(0);//No se rellenó el casillero VOLVER A GENERAR!!!
   END;
END;
//---------------------------------------------------
EXPORT CasillaConPocasDudas()
BEGIN
  LOCAL Contador:=0;
  LOCAL PosibilidadMenorDetectada:=NroFichas+1;
  LOCAL GrupoConMenosDudas:=0;
   WHILE Contador<NroGrupos DO
    Contador:=Contador+1;
    LOCAL GrupoAnalizado:=Contador;
    LOCAL PosibilidadGrupoAnalizado:=NroPosibilidadGrupo[GrupoAnalizado];
      IF PosibilidadGrupoAnalizado THEN
        IF PosibilidadMenorDetectada>PosibilidadGrupoAnalizado THEN
           PosibilidadMenorDetectada:=PosibilidadGrupoAnalizado;
           GrupoConMenosDudas:=GrupoAnalizado;
        END;
      END;
   END;
  LOCAL PosiblesCasillasConMenosDudas:=DatosGrupos[GrupoConMenosDudas];
  LOCAL ListaCasillasMenosDudas:={};
  Contador:=0;
   WHILE Contador<NroFichas DO
    Contador:=Contador+1;
    LOCAL FichaAnalizada:=PosiblesCasillasConMenosDudas[Contador];
      IF NOT(CasillaConocida[FichaAnalizada]) THEN
        ListaCasillasMenosDudas:=append(ListaCasillasMenosDudas,FichaAnalizada);
      END; 
   END;
  LOCAL TamanoListaCasillas:=SIZE(ListaCasillasMenosDudas);
  LOCAL NroAleatorio:=RANDINT(1,TamanoListaCasillas);
  RETURN(ListaCasillasMenosDudas[NroAleatorio]);
END;
//---------------------------------------------------
EXPORT RellenarTablero()
BEGIN
  AlistarVariablesGenerador();
  LOCAL ContadorTablero:=0;
  LOCAL FichaParaRelleno;
  WHILE ContadorTablero<NroCasillas DO
     ContadorTablero:=ContadorTablero+1;
     FichaParaRelleno:=CasillaConPocasDudas();
     IF NOT(RellenarCasillero(FichaParaRelleno)) THEN
        ContadorTablero:=NroCasillas; //terminar ciclo
     END;
  END;
   IF ΣLIST(CasillaConocida)=NroCasillas THEN
     RETURN(1); //Si se pudo rellenar todo el tablero
   ELSE
     RETURN(0); //No se pudo rellenar el tablero
   END;
END;
//---------------------------------------------------
EXPORT  ObtenerDeLaBiblioteca()  //obtiene un sudoku aleatorio de la biblioteca
BEGIN
  LOCAL SubBiblioteca:=Biblioteca[TipoJuego];
  LOCAL Dimension:=SIZE(SubBiblioteca);
  LOCAL NroAleatorio:=RANDINT(1,Dimension);
  Casillas:=SubBiblioteca[NroAleatorio];
  CasillaConocida:=MAKELIST(1,X,1,NroCasillas,1);
  LOCAL ContadorCiclo:=0;
     WHILE ContadorCiclo<NroFichas DO
         ContadorCiclo:=ContadorCiclo+1;
         IntercambiarFichas();
     END;
END;
//---------------------------------------------------
EXPORT IntercambiarFichas()
BEGIN
  LOCAL Ficha1:=RANDINT(1,NroFichas);
  LOCAL Ficha2:=RANDINT(1,NroFichas);
   IF Ficha1<>Ficha2 THEN
      LOCAL Contador:=0;
       WHILE Contador<NroCasillas DO
         Contador:=Contador+1;
         LOCAL FichaAnalizada:=Casillas[Contador];
          CASE
            IF FichaAnalizada=Ficha1 THEN
              Casillas[Contador]:=Ficha2;
            END;
            IF FichaAnalizada=Ficha2 THEN
              Casillas[Contador]:=Ficha1;
            END;
          END;
       END;
   END;
END;
//---------------------------------------------------
EXPORT OcultarCasillasTablero()
BEGIN
  CasillasParaJugarOriginales:=MAKELIST(0,X,1,NroCasillas,1);
  CasillasParaJugar:=MAKELIST(0,X,1,NroCasillas,1);
  CasillaConocidaParaJugar:=MAKELIST(0,X,1,NroCasillas,1);
  EstadoCasillaParaJugar:=MAKELIST(0,X,1,NroCasillas,1);
  //----------
  LOCAL CONTADOR:=0;  //Cuenta 
  LOCAL VALORMINIMO:=IP(NroFichas*0.5); //para saltos random
  LOCAL VALORMAXIMO:=IP(NroFichas*1.5); //
  LOCAL Salto:=RANDINT(1,NroCasillas);
  //----------
 WHILE CONTADOR<NroCasillasFijas DO
   //configurando salto aleatorio dentor de 1 y nro casillas
      Salto:=Salto+RANDINT(VALORMINIMO,VALORMAXIMO);
      LOCAL Ciclos:=IP(Salto/NroCasillas);
      Salto:=Salto-Ciclos*NroCasillas;
      IF Salto<1 THEN Salto:=1; END;
      IF Salto>NroCasillas THEN Salto:=NroCasillas END;
   //------------------------------
   IF NOT(CasillaConocidaParaJugar[Salto]) THEN
        CONTADOR:=CONTADOR+1;
        CasillasParaJugarOriginales[Salto]:=Casillas[Salto];
        CasillasParaJugar[Salto]:=Casillas[Salto];
        CasillaConocidaParaJugar[Salto]:=1;
        EstadoCasillaParaJugar[Salto]:=1;
   END;
 END;
END;
//---------------------------------------------------
EXPORT PantallaOscuridad()
BEGIN
  RECT_P(0,0,320,240,RGB(0,0,0,100));//oscuridad
END;
//---------------------------------------------------
EXPORT GenerarSudoku()
BEGIN
   VictoriaJuego:=0;
  LOCAL NumeroDeCiclos:=0; //cuenta los numeros de los ciclos que se rellena el tablero
  LOCAL NoTenemosTableroListo:=1; //todavía no tenemos el tablero
  LOCAL SeCompletoElTablero:=0;  //variable para ver si se completo el tablero
  PantallaOscuridad();
  //-------------
  WHILE NumeroDeCiclos<LimiteIteracionGen  DO
    NumeroDeCiclos:=NumeroDeCiclos+1; //Contador de ciclos
    RECT_P(0,0,320,30,RGB(0,0,50),RGB(0,0,50));
    TEXTOUT_P(" [!] C:"+STRING(NumeroDeCiclos)+"...",5,10,2,RGB(255,255,255));
    SeCompletoElTablero:=RellenarTablero(); 
    IF SeCompletoElTablero THEN
       NumeroDeCiclos:=LimiteIteracionGen; //Tablero listo :) 
    END;
  END;
  //--------------
  IF NOT(SeCompletoElTablero) THEN
    ObtenerDeLaBiblioteca();
  END;
  //..............
  OcultarCasillasTablero();
  RETURN(NumeroDeCiclos); //devuelve el numero de ciclos
END;
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//
//  Funciones Dibujar
//
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
EXPORT DibujarCuadro(Xinicial,Yinicial,AnchoX,AnchoY)
BEGIN
  RECT_P(Xinicial,Yinicial,Xinicial+AnchoX,Yinicial+AnchoY,FONDO2);
END;
//---------------------------------------------------
EXPORT Grafico()
BEGIN
  startview(-4);
  RECT_P(0,0,350,350,FONDO);
  RECT_P(94,4,314,224,NEGRO,BLANCO);
  RECT_P(96,6,312,222,NEGRO,BLANCO);
    //variables inicio
      LOCAL InicioX:=104; //para tipo3
      LOCAL InicioY:=7;
     //contadores para ciclo
    LOCAL ContadorTotal:=0;
    LOCAL ContadorX:=0;   
    LOCAL ContadorY:=0;
   //Personalizando para cada caso
   CASE
    IF TipoJuego=1 THEN
      InicioX:=115;
      InicioY:=18;
      DibujarCuadro(204,7,107,107);
      DibujarCuadro(97,114,107,107);
      LINE_P(97,60,311,60,GRIS2);
      LINE_P(97,168,311,168,GRIS2);
      LINE_P(150,7,150,221,GRIS2);
      LINE_P(258,7,258,221,GRIS2);
      LINE_P(97,114,311,114,NEGRO);
      LINE_P(204,7,204,221,NEGRO);
    END;
    IF TipoJuego=2 THEN
      InicioX:=110;
      InicioY:=10;
      DibujarCuadro(204,7,107,71);
      DibujarCuadro(97,79,107,71);
      DibujarCuadro(204,150,107,71);
      LINE_P(97,42,311,42,GRIS2);
      LINE_P(97,114,311,114,GRIS2);
      LINE_P(97,186,311,186,GRIS2);
      LINE_P(132,7,132,221,GRIS2);
      LINE_P(168,7,168,221,GRIS2);
      LINE_P(240,7,240,221,GRIS2);
      LINE_P(276,7,276,221,GRIS2);
      LINE_P(97,150,311,150,NEGRO);
      LINE_P(204,7,204,221,NEGRO);
      LINE_P(97,78,311,78,NEGRO);
    END;
    IF TipoJuego=3 THEN
      DibujarCuadro(97,79,71,71);
      DibujarCuadro(168,7,71,71);
      DibujarCuadro(240,79,71,71);
      DibujarCuadro(168,150,71,71);
      LINE_P(97,30,311,30,GRIS2);
      LINE_P(97,54,311,54,GRIS2);
      LINE_P(97,102,311,102,GRIS2);
      LINE_P(97,126,311,126,GRIS2);
      LINE_P(97,174,311,174,GRIS2);
      LINE_P(97,198,311,198,GRIS2);
      LINE_P(120,7,120,221,GRIS2);
      LINE_P(144,7,144,221,GRIS2);
      LINE_P(192,7,192,221,GRIS2);
      LINE_P(216,7,216,221,GRIS2);
      LINE_P(264,7,264,221,GRIS2);
      LINE_P(288,7,288,221,GRIS2);
      LINE_P(97,78,311,78,NEGRO);
      LINE_P(97,150,311,150,NEGRO);
      LINE_P(168,7,168,221,NEGRO);
      LINE_P(240,7,240,221,NEGRO);
    END;
   END;


//LOCAL CasillasParaJugarOriginales:={}; //ORIGINALES NO SE MODIFICAN
//LOCAL CasillasParaJugar:={}; //Casillas para Jugar, Incluye la casilla por defecto
//LOCAL CasillaConocidaParaJugar:={}; //Marca 1 sólo si se conoce el contenido de la casilla
//LOCAL EstadoCasillaParaJugar:={};  // Indica el estado 
    // 0 -- NO SE CONOCE
    // 1 -- CASILLA FIJA NO SE PUEDE MODIFICAR
    // 2 -- CASILLA JUGADA SIN QUEJA AZUL
    // 3 -- CASILLA JUGADA CON QUEJA ROJO
    // 4 -- CASILLA DADA COMO PISTA MORADO   
//NroCasillas  81
//LOCAL NroCasillas33:=81;
//LOCAL NroFichas33:=9;
//LOCAL Fuente33:=5;
//LOCAL Padding33:=24;
//LOCAL LimiteIteracionGen33:=10;
//LOCAL NroCasillasFijas33:=25;

//LOCAL CASILLAFIJA:=       RGB(0,0,0);
//LOCAL CASILAJUGADAOK:=    RGB(0,0,150);
//LOCAL CASILLAJUGADAERROR:=RGB(150,0,0);
//LOCAL CASILLAPISTA:=      RGB(75,0,75);

    //Ciclo Dibujo
    WHILE ContadorTotal<NroCasillas DO
      LOCAL Fila:=IP(ContadorTotal/NroFichas);      
      LOCAL Columna:=ContadorTotal-Fila*NroFichas;
      ContadorTotal:=ContadorTotal+1;
      //--dibujo letra

        IF CasillaConocidaParaJugar[ContadorTotal] THEN
          LOCAL COLOR;
          LOCAL INDICOLOR:=EstadoCasillaParaJugar[ContadorTotal];
           CASE
             IF INDICOLOR=1 THEN COLOR:=CASILLAFIJA; END;
             IF INDICOLOR=2 THEN COLOR:=CASILAJUGADAOK; END;
             IF INDICOLOR=3 THEN COLOR:=CASILLAJUGADAERROR; END;
             IF INDICOLOR=4 THEN COLOR:=CASILLAPISTA; END;
           END;     
         LOCAL Texto:=CasillasParaJugar[ContadorTotal];
         TEXTOUT_P(Texto,InicioX+Padding*Columna,InicioY+Padding*Fila,Fuente,COLOR);
        END;

    END;
  TEXTOUT_P("[i] https://github.com/Saul11235/SudokuPrime",1,228,1,GRIS);
  //--------------------------------
  RECT_P(0,0,25,25,ROJO);
  TEXTOUT_P("X",6,-1,7,BLANCO);
  TEXTOUT_P("Sudoku",29,2,5,AZUL1);
    //********  BOTON TIPO SUDOKU 2x2 2x3 3x3
  RECT_P(10,30,85,70,COLORBOTON);
   LOCAL TEXTO:="";
    CASE
      IF  TipoJuego=1 THEN TEXTO:="2x2"END;
      IF  TipoJuego=2 THEN TEXTO:="2x3"END;
      IF  TipoJuego=3 THEN TEXTO:="3x3"END;
    END;   
  TEXTOUT_P(TEXTO,30,36,7,COLORBOTONT);
    //******** BOTON NUEVO SUDOKU
  RECT_P(10,80,85,120,COLORBOTON);
  TEXTOUT_P(CHAR({10000,9638}),29,86,7,COLORBOTONT);
    //******** BOTON REINICIAR
  RECT_P(10,130,85,170,COLORBOTON);
  TEXTOUT_P(CHAR({9638,8634}),32,136,7,COLORBOTONT);
    //******** BOTON PISTA
  IF  NOT(VictoriaJuego) THEN
     RECT_P(10,180,85,220,COLORBOTON);
     TEXTOUT_P(CHAR({9638,10004}),32,186,7,COLORBOTONT);
  ELSE
     TEXTOUT_P("OK!",32,186,7,AZUL1);
  END;
    //******** 
  botonera();// <--- LLAMA A FUNCION DE BOTONERAS 
END;
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//
//  Funciones Táctiles	
//
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
EXPORT SensorTactil()  // DOC Congela la pantalla hasta que alguien la toca, guarda coord en PosX y PosY
BEGIN                  // Codigo Reutilizado Viejos Programas
WAIT(0.005);
 //--- MODULOS DE GUARDAR PANTALLAS
 IF nuevapantalla THEN
    nuevapantalla:=0;
    ContadorPantalla:=0;
 ELSE
    ContadorPantalla:=ContadorPantalla+1;
      IF ContadorPantalla>LimitreConPantalla THEN ContadorPantalla:=0; Startview(-4); SALIRJUEGO() ; END;
 END;
 //--------------------------------
  //     VariableTecla:=0;  //esta es una variable de una tecla que se activará
  //     SePresionoUnatecla:=0;
  IF NOT(GETKEY==-1) THEN   
    //se ha presionado una tecla
    //    IF SeEstaApretandoBoton THEN
    //        RETURN(0);
    //   ELSE
     SePresionoUnatecla:=0; //por defecto poner no se presiono una tecla
      LOCAL CONTATECLA:=0;
      LOCAL LIMITETECLA:=50;
       WHILE  LIMITETECLA>CONTATECLA DO
         CONTATECLA:=CONTATECLA+1; //rellena contador
         IF ISKEYDOWN(CONTATECLA) 
          THEN    
            SePresionoUnatecla:=1;
            VariableTecla:=CONTATECLA; 
            CONTATECLA:=51;
            WAIT(0.05);
          END;                   
        END;
      //    END;
  ELSE   
    SePresionoUnatecla:=0;
    PunteroTactil:=B→R(MOUSE());
    PunteroTactil:=PunteroTactil(1);
     IF SIZE(PunteroTactil)=0  OR NOT(GETKEY==-1 )
     THEN
        IF NOT(SeEstaApretandoBoton) 
         THEN
          WAIT(0.0001);  //si no detecta ninguna señal vuelve a activar  el sensor 
          SensorTactil();
         END;
     ELSE 
        PosX:=PunteroTactil(1);
        PosY:=PunteroTactil(2); 
     END;
  END; 
END;
//---------------------------------------------------
EXPORT ValidarCoordTactil(XX1,YY1,XX2,YY2)  //Respecto a las corrdenadas 
BEGIN
LOCAL XMIN, XMAX, YMIN, YMAX;
  IF XX1<XX2 THEN
    XMIN:=XX1;
    XMAX:=XX2;
  ELSE
    XMIN:=XX2;
    XMAX:=XX1;
  END;
  IF YY1<YY2 THEN
    YMIN:=YY1;
    YMAX:=YY2;
  ELSE
    YMIN:=YY2;
    YMAX:=YY1;
  END;
//COMPARAR CON PosX Y PosY
  IF ( (PosX<XMAX) AND (PosX>XMIN) ) AND ( (PosY<YMAX) AND (PosY>YMIN)) THEN
       ReconocerTeclado:=PunteroTactil; //<--- ELIMINAR SI NO ES NECESARIO
       PunteroTactil:={0,0,0,0};PosX:=0;PosY:=0;
       nuevapantalla:=1; EstaUsandoTeclado:=0;
       RETURN 1;
  ELSE
       RETURN 0;
  END;
END;
//---------------------------------------------------
EXPORT Titilar(XX1,YY1,XX2,YY2)
BEGIN
  RECT_P(XX1+2,YY1+2,XX2-2,YY2-2,RGB(0,0,0));
  WAIT(0.03);
  RECT_P(XX1+2,YY1+2,XX2-2,YY2-2,RGB(255,255,255));
  WAIT(0.02);
  RECT_P(XX1+2,YY1+2,XX2-2,YY2-2,RGB(0,0,0));
  WAIT(0.02);
  RECT_P(XX1+2,YY1+2,XX2-2,YY2-2,RGB(255,255,255));
  WAIT(0.03);
  RECT_P(XX1+2,YY1+2,XX2-2,YY2-2,RGB(0,0,0));
  WAIT(0.02);
END;
//---------------------------------------------------
EXPORT botonera()   
BEGIN
 SensorTactil();
  CASE
    IF ValidarCoordTactil(0,0,25,25) THEN
      //Funcion Boton Cerrar Sudoku
      Titilar(0,0,25,25);
      SALIRJUEGO();
    END;
    IF ValidarCoordTactil(10,30,85,70) THEN
      //Funcion Boton Cerrar Sudoku
      Titilar(10,30,85,70);
      CambiarTipoSudoku() ;
    END;
    IF ValidarCoordTactil(10,80,85,120) THEN
      //Funcion Boton NUEVO Sudoku
      Titilar(10,80,85,120);
      NuevoSudoku();
    END;
    IF ValidarCoordTactil(10,130,85,170) THEN
      //Funcion Boton reiniciar Sudoku
      Titilar(10,130,85,170);
      ReiniciarSudoku();
    END;
    IF ValidarCoordTactil(10,180,85,220) THEN
      //Funcion Boton Pista
       IF NOT(SeEstaApretandoBoton)  THEN
         Titilar(10,180,85,220);
         PistaSudoku();
       END;
    END;
     //---------
     IF ValidarCoordTactil(96,6,312,222) THEN
       //Funcion Boton reiniciar Sudoku
       LOCAL DimensionCelda:=216/NroFichas;
       LOCAL DimensionX:=IP((ReconocerTeclado[1]-96)/DimensionCelda)+1;
       LOCAL DimensionY:=IP((ReconocerTeclado[2]-6)/DimensionCelda);
       LOCAL CeldaSeleccionada:=DimensionX+DimensionY*NroFichas;
       TocarCasilleroSudoku(CeldaSeleccionada);
     END;
     //---------
    botonera();  
  END;
  Grafico();
END;
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//
//  Funciones jugadas
//
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
EXPORT CambiarTipoSudoku()   
BEGIN
  MSGBOX("CambiarTipoSudoku");
END;
//---------------------------------------------------
EXPORT NuevoSudoku()   
BEGIN
  GenerarSudoku();
END;
//---------------------------------------------------
EXPORT ReiniciarSudoku()   
BEGIN
  MSGBOX("ReiniciarSudoku");
END;
//---------------------------------------------------
EXPORT PistaSudoku()   
BEGIN
  MSGBOX("PistaSudoku");
END;
//---------------------------------------------------
EXPORT TocarCasilleroSudoku(Casillero)   
BEGIN

   LOCAL DimensionCelda:=216/NroFichas;
   LOCAL DimensionX:=IP((ReconocerTeclado[1]-96)/DimensionCelda);
   LOCAL DimensionY:=IP((ReconocerTeclado[2]-6)/DimensionCelda);
   Titilar(96+DimensionX*DimensionCelda,6+DimensionY*DimensionCelda,96+(DimensionX+1)*(DimensionCelda),6+(DimensionY+1)*DimensionCelda);
   MSGBOX("Casillero Tocado"+Casillero);
END;


//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//
//  Funciones salir
//
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------

EXPORT SALIRJUEGO()   
BEGIN
  ContadorPantalla:=0;
  RECT_P(0,0,320,240,NEGRO);
  TEXTOUT_P("Bye bye - Adios - Ciao ",29,86,7,COLORBOTONT);
  WAIT(0.6);
  KILL;
END;
















