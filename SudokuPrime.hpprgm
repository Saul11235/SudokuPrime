#pragma mode( separator(.,;) integer(h32) )

// SudokuPrime por Edwin Saul/Saul11235
// sudoku game for hp prime calculators
// sudoku para calculadoras ho prime

//---------------------------------------------------
TipoJuego:=1; //2x2 tipo1   -  2x3 tipo2  -  3x3 tipo3
//---------------------------------------------------
//TIPO1 2x2
LOCAL DatosGrupos22:={{1,2,5,6},{3,4,7,8},{9,10,13,14},{11,12,15,16},{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16},{1,5,9,13},{2,6,10,14},{3,7,11,15},{4,8,12,16}};
LOCAL DatosCasillas22:={{1,5,9},{1,5,10},{2,5,11},{2,5,12},{1,6,9},{1,6,10},{2,6,11},{2,6,12},{3,7,9},{3,7,10},{4,7,11},{4,7,12},{3,8,9},{3,8,10},{4,8,11},{4,8,12}};
LOCAL NroCasillas22:=16;
LOCAL NroFichas22:=4;
LOCAL Fuente22:=7;
LOCAL Padding22:=35;
//TIPO2 2x3
LOCAL DatosGrupos23:={{1,2,3,7,8,9},{4,5,6,10,11,12},{13,14,15,19,20,21},{16,17,18,22,23,24},{25,26,27,31,32,33},{28,29,30,34,35,36},{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18},{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36},{1,7,13,19,25,31},{2,8,14,20,26,32},{3,9,15,21,27,33},{4,10,16,22,28,34},{5,11,17,23,29,35},{6,12,18,24,30,36}};
LOCAL DatosCasillas23:={{1,7,13},{1,7,14},{1,7,15},{2,7,16},{2,7,17},{2,7,18},{1,8,13},{1,8,14},{1,8,15},{2,8,16},{2,8,17},{2,8,18},{3,9,13},{3,9,14},{3,9,15},{4,9,16},{4,9,17},{4,9,18},{3,10,13},{3,10,14},{3,10,15},{4,10,16},{4,10,17},{4,10,18},{5,11,13},{5,11,14},{5,11,15},{6,11,16},{6,11,17},{6,11,18},{5,12,13},{5,12,14},{5,12,15},{6,12,16},{6,12,17},{6,12,18}};
LOCAL NroCasillas23:=36;
LOCAL NroFichas23:=6;
LOCAL Fuente23:=6;
LOCAL Padding23:=30;
//TIPO2 3x3
LOCAL DatosGrupos33:={{1,2,3,10,11,12,19,20,21},{4,5,6,13,14,15,22,23,24},{7,8,9,16,17,18,25,26,27},{28,29,30,37,38,39,46,47,48},{31,32,33,40,41,42,49,50,51},{34,35,36,43,44,45,52,53,54},{55,56,57,64,65,66,73,74,75},{58,59,60,67,68,69,76,77,78},{61,62,63,70,71,72,79,80,81},{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54},{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81},{1,10,19,28,37,46,55,64,73},{2,11,20,29,38,47,56,65,74},{3,12,21,30,39,48,57,66,75},{4,13,22,31,40,49,58,67,76},{5,14,23,32,41,50,59,68,77},{6,15,24,33,42,51,60,69,78},{7,16,25,34,43,52,61,70,79},{8,17,26,35,44,53,62,71,80},{9,18,27,36,45,54,63,72,81}};                          
LOCAL DatosCasillas33:={{1,10,19},{1,10,20},{1,10,21},{2,10,22},{2,10,23},{2,10,24},{3,10,25},{3,10,26},{3,10,27},{1,11,19},{1,11,20},{1,11,21},{2,11,22},{2,11,23},{2,11,24},{3,11,25},{3,11,26},{3,11,27},{1,12,19},{1,12,20},{1,12,21},{2,12,22},{2,12,23},{2,12,24},{3,12,25},{3,12,26},{3,12,27},{4,13,19},{4,13,20},{4,13,21},{5,13,22},{5,13,23},{5,13,24},{6,13,25},{6,13,26},{6,13,27},{4,14,19},{4,14,20},{4,14,21},{5,14,22},{5,14,23},{5,14,24},{6,14,25},{6,14,26},{6,14,27},{4,15,19},{4,15,20},{4,15,21},{5,15,22},{5,15,23},{5,15,24},{6,15,25},{6,15,26},{6,15,27},{7,16,19},{7,16,20},{7,16,21},{8,16,22},{8,16,23},{8,16,24},{9,16,25},{9,16,26},{9,16,27},{7,17,19},{7,17,20},{7,17,21},{8,17,22},{8,17,23},{8,17,24},{9,17,25},{9,17,26},{9,17,27},{7,18,19},{7,18,20},{7,18,21},{8,18,22},{8,18,23},{8,18,24},{9,18,25},{9,18,26},{9,18,27}};       
LOCAL NroCasillas33:=81;
LOCAL NroFichas33:=9;
LOCAL Fuente33:=5;
LOCAL Padding33:=25;
//---------------------------------------------------
//variables para configurar tipo de sudoku
LOCAL DatosGrupos,DatosCasillas,NroCasillas,NroFichas,Fuente,Padding;
//---------------------------------------------------
//variables generadas
LOCAL NroGrupos,Casillas,CasillaConocida,PosibilidadGrupo,PosibilidadCasillas,NroPosibilidadGrupo,ContadorCasillas;
LOCAL ContadorGenerador:=0;
//---------------------------------------------------
  ConfigurarTipoSudoku();
  AlistarVariablesGenerador();
  BorrarPosibilidadGrupo(CodGrupo,FichaParaBorrar);
  BorrarPosibilidadCasilla(CodCasilla,FichaParaBorrar);
  PosibleFichaParaCasilla(CodCasilla);
  SePuedeColocarFicha(CodCasilla);
  RellenarCasillero(CodCasilla); 
  CasillaConPocasDudas(); 
  RellenarTablero();
  GenerarSudoku();
  DibujarCuadro(Xinicial,Yinicial,AnchoX,AnchoY); //Dibujar para vista previa
  Grafico(); 
//---------------------------------------------------
VIEW "Sudoku",START()
BEGIN 
  TipoJuego:=RANDINT(1,3); //Tipo Aleatorio de Sudoku
  ConfigurarTipoSudoku();
  GenerarSudoku();
  Grafico(); 
END;
//---------------------------------------------------
EXPORT ConfigurarTipoSudoku() 
BEGIN
  CASE
   IF TipoJuego=1 THEN   //CASO SUDOKU 2x2-------
    DatosGrupos:=DatosGrupos22;
    DatosCasillas:=DatosCasillas22;
    NroCasillas:=NroCasillas22;
    NroFichas:=NroFichas22;
    Fuente:=Fuente22;
    Padding:=Padding22;
   END;
   IF TipoJuego=2 THEN   //CASO SUDOKU 2x3-------
    DatosGrupos:=DatosGrupos23;
    DatosCasillas:=DatosCasillas23;
    NroCasillas:=NroCasillas23;
    NroFichas:=NroFichas23;
    Fuente:=Fuente23;
    Padding:=Padding23;
   END;
   IF TipoJuego=3 THEN   //CASO SUDOKU 3x3-------
    DatosGrupos:=DatosGrupos33;
    DatosCasillas:=DatosCasillas33;
    NroCasillas:=NroCasillas33;
    NroFichas:=NroFichas33;
    Fuente:=Fuente33;
    Padding:=Padding33;
   END;
  END;
  AlistarVariablesGenerador();
END;
//---------------------------------------------------
EXPORT AlistarVariablesGenerador()
BEGIN
  Casillas:=MAKELIST(0,X,1,NroCasillas,1);
  CasillaConocida:=MAKELIST(0,X,1,NroCasillas,1);
  LOCAL ListaFichas:=MAKELIST(X,X,1,NroFichas,1);
  NroGrupos:=SIZE(DatosGrupos);
  PosibilidadGrupo:=MAKELIST(ListaFichas,X,1,NroGrupos,1);
  PosibilidadCasillas:=MAKELIST(ListaFichas,X,1,NroCasillas,1);
  NroPosibilidadGrupo:=MAKELIST(NroFichas,X,1,NroGrupos,1);
  ContadorCasillas:=NroCasillas;
END;
//---------------------------------------------------
EXPORT BorrarPosibilidadGrupo(CodGrupo,FichaParaBorrar)
BEGIN
  LOCAL PosEsteGrupo:=PosibilidadGrupo[CodGrupo];
  LOCAL PosicionLista:=POS(PosEsteGrupo,FichaParaBorrar);
  IF PosicionLista THEN
     LOCAL ListaReducida:=SUPPRESS(PosEsteGrupo,PosicionLista);
     PosibilidadGrupo[CodGrupo]:=ListaReducida;
     NroPosibilidadGrupo[CodGrupo]:=NroPosibilidadGrupo[CodGrupo]-1;
  END;
END;
//---------------------------------------------------
EXPORT BorrarPosibilidadCasilla(CodCasilla,FichaParaBorrar)
BEGIN
  LOCAL PosEstaFicha:=PosibilidadCasillas[CodCasilla];
  LOCAL PosicionLista:=POS(PosEstaFicha,FichaParaBorrar);
  IF PosicionLista THEN
     LOCAL ListaReducida:=SUPPRESS(PosEstaFicha,PosicionLista);
     PosibilidadCasillas[CodCasilla]:=ListaReducida;
  END;
END;
//---------------------------------------------------
EXPORT PosibleFichaParaCasilla(CodCasilla)
BEGIN
  //No try-catch
  LOCAL PosibilidadesEstaCasilla:=PosibilidadCasillas[CodCasilla];
  LOCAL Dimension:=SIZE(PosibilidadesEstaCasilla);
  LOCAL PosicionAleatoria:=RANDINT(1,Dimension);
  RETURN(PosibilidadesEstaCasilla[PosicionAleatoria  ]);
END;
//---------------------------------------------------
EXPORT SePuedeColocarFicha(CodCasilla)
BEGIN
  LOCAL HayPosiblesFichas:=SIZE(PosibilidadCasillas[CodCasilla]);
  LOCAL SeConoceElDato:=CasillaConocida[CodCasilla];
   IF HayPosiblesFichas AND NOT(SeConoceElDato) THEN
    RETURN(1); //si se puede colocar la ficha
   ELSE
    RETURN(0); //No se puede colocar la ficha
   END;
END;
//---------------------------------------------------
EXPORT RellenarCasillero(CodCasilla)
BEGIN
   IF  SePuedeColocarFicha(CodCasilla) THEN
     LOCAL FichaAleatoria:=PosibleFichaParaCasilla(CodCasilla);
     Casillas[CodCasilla]:=FichaAleatoria;
     CasillaConocida[CodCasilla]:=1;
     ContadorCasillas:=ContadorCasillas-1;
     //Borrando Posibilidades en grupos y casillas
     LOCAL GruposImplicados:=DatosCasillas[CodCasilla];
     LOCAL Contador:=0;
     LOCAL Limite:=SIZE(GruposImplicados);
       WHILE Contador<Limite DO
         Contador:=Contador+1;
         LOCAL GrupoImplicado:=GruposImplicados[Contador];
         BorrarPosibilidadGrupo(GrupoImplicado,FichaAleatoria);
         LOCAL CasillasImplicadas:=DatosGrupos[GrupoImplicado];
         LOCAL Contador2:=0;
         LOCAL Limite2:=SIZE(CasillasImplicadas);
           WHILE Contador2<Limite2 DO
             Contador2:=Contador2+1;
             LOCAL CasillaImplicada:=CasillasImplicadas[Contador2];
             BorrarPosibilidadCasilla(CasillaImplicada,FichaAleatoria);
           END;
       END; 
     RETURN(1);//Se relleno el casillero, todo ok
   ELSE
     RETURN(0);//No se rellenÃ³ el casillero VOLVER A GENERAR!!!
   END;
END;
//---------------------------------------------------
EXPORT CasillaConPocasDudas()
BEGIN
  LOCAL Contador:=0;
  LOCAL PosibilidadMenorDetectada:=NroFichas+1;
  LOCAL GrupoConMenosDudas:=0;
   WHILE Contador<NroGrupos DO
    Contador:=Contador+1;
    LOCAL GrupoAnalizado:=Contador;
    LOCAL PosibilidadGrupoAnalizado:=NroPosibilidadGrupo[GrupoAnalizado];
      IF PosibilidadGrupoAnalizado THEN
        IF PosibilidadMenorDetectada>PosibilidadGrupoAnalizado THEN
           PosibilidadMenorDetectada:=PosibilidadGrupoAnalizado;
           GrupoConMenosDudas:=GrupoAnalizado;
        END;
      END;
   END;
  LOCAL PosiblesCasillasConMenosDudas:=DatosGrupos[GrupoConMenosDudas];
  LOCAL ListaCasillasMenosDudas:={};
  Contador:=0;
   WHILE Contador<NroFichas DO
    Contador:=Contador+1;
    LOCAL FichaAnalizada:=PosiblesCasillasConMenosDudas[Contador];
      IF NOT(CasillaConocida[FichaAnalizada]) THEN
        ListaCasillasMenosDudas:=append(ListaCasillasMenosDudas,FichaAnalizada);
      END; 
   END;
  LOCAL TamanoListaCasillas:=SIZE(ListaCasillasMenosDudas);
  LOCAL NroAleatorio:=RANDINT(1,TamanoListaCasillas);
  RETURN(ListaCasillasMenosDudas[NroAleatorio]);
END;
//---------------------------------------------------
EXPORT RellenarTablero()
BEGIN
  AlistarVariablesGenerador();
  LOCAL ContadorTablero:=0;
  LOCAL FichaParaRelleno;
  WHILE ContadorTablero<NroCasillas DO
     ContadorTablero:=ContadorTablero+1;
     FichaParaRelleno:=CasillaConPocasDudas();
     IF NOT(RellenarCasillero(FichaParaRelleno)) THEN
        ContadorTablero:=NroCasillas; //terminar ciclo
     END;
  END;
   IF Î£LIST(CasillaConocida)=NroCasillas THEN
     RETURN(1); //Si se pudo rellenar todo el tablero
   ELSE
     RETURN(0); //No se pudo rellenar el tablero
   END;
END;
//---------------------------------------------------
EXPORT GenerarSudoku()
BEGIN
  LOCAL NumeroDeCiclos:=0; //cuenta los numeros de los ciclos que se rellena el tablero
  LOCAL NoTenemosTableroListo:=1; //todavÃ­a no tenemos el tablero
  WHILE NoTenemosTableroListo DO
    NumeroDeCiclos:=NumeroDeCiclos+1; //Contador de ciclos
    RECT_P(0,0,320,50,RGB(0,0,50),RGB(0,0,50));
    TEXTOUT_P(" [!] C:"+STRING(NumeroDeCiclos)+"...",5,10,2,RGB(255,255,255));
    IF RellenarTablero() THEN
       NoTenemosTableroListo:=0; //Tablero listo :) 
    END;
  END;
  RETURN(NumeroDeCiclos); //devuelve el numero de ciclos
END;
//---------------------------------------------------
EXPORT DibujarCuadro(Xinicial,Yinicial,AnchoX,AnchoY)
BEGIN
  RECT_P(Xinicial,Yinicial,Xinicial+AnchoX,Yinicial+AnchoY,RGB(200,200,235),RGB(200,200,235));
END;
//---------------------------------------------------
EXPORT Grafico()
BEGIN
  startview(-4);
  RECT_P(0,0,350,350,RGB(250,250,250),RGB(250,250,250));
   CASE
    IF TipoJuego=1 THEN
      DibujarCuadro(65,70,70,70);
      DibujarCuadro(-5,0,70,70);
    END;
    IF TipoJuego=2 THEN
      DibujarCuadro(85,63,90,60);
      DibujarCuadro(-5,3,90,60);
      DibujarCuadro(-5,123,90,60);
    END;
    IF TipoJuego=3 THEN
      DibujarCuadro(72,5,75,75);
      DibujarCuadro(147,80,75,75);
      DibujarCuadro(-3,80,75,75);
      DibujarCuadro(72,155,75,75);
    END;
   END;
    //variables inicio
      LOCAL InicioX:=5;
      LOCAL InicioY:=5;
     //contadores para ciclo
    LOCAL ContadorTotal:=0;
    LOCAL ContadorX:=0;   
    LOCAL ContadorY:=0;
    //Ciclo Dibujo
    WHILE ContadorTotal<NroCasillas DO
      LOCAL Fila:=IP(ContadorTotal/NroFichas);      
      LOCAL Columna:=ContadorTotal-Fila*NroFichas;
      ContadorTotal:=ContadorTotal+1;
      //--dibujo letra
      LOCAL Texto:=Casillas[ContadorTotal];
      TEXTOUT_P(Texto,InicioX+Padding*Columna,InicioY+Padding*Fila,Fuente,RGB(0,0,0));
    END;
  WAIT(0);
END;
//---------------------------------------------------

